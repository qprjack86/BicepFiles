// Run this in Azure PowerShell or CLI prior to first time deployment
// Set-AzMarketplaceTerms -Publisher cisco -Product cisco-meraki-vmx -Name cisco-meraki-vmx -Accept
//OR
// az vm image terms accept --publisher cisco --offer cisco-meraki-vmx --plan cisco-meraki-vmx

@description('Location to deploy all resources. Leave this value as-is to inherit the location from the parent resource group.')
param location string = resourceGroup().location

@description('This is the name of the your VM')
@metadata({ title: 'VM Name' })
param vmName string ='vmx'

@description('This is your authentication string generated by Meraki Dashboard')
param merakiAuthToken string

@description('Availability zone number for the vMX')
@allowed([
  '0'
  '1'
  '2'
  '3'
])
param zone string ='0'

@description('New  VNet Name')
param virtualNetworkName string = 'Meraki'

@description('VNet address prefix')
param virtualNetworkAddressPrefix string

@description('Resource group of the VNet')
param virtualNetworkResourceGroup string = 'Meraki'

@description('The size of the VM')
param virtualMachineSize string ='Standard_F4s_v2'

@description('New subnet Name')
param subnetName string = 'vMX'

@description('Subnet address prefix')
param subnetAddressPrefix string

@description('Name of remote vNet to peer to')
param remoteVirtualNetworkName string 

@description('Name of remote vNet resource group')
param remoteVirtualNetworkrg string

// Bits needed for Meraki Managed Application
param applicationResourceName string = 'vmxapp'
param managedResourceGroupId string = ''
param managedIdentity object = {
}

var managedResourceGroupIdvar = (empty(managedResourceGroupId) ? '${subscription().id}/resourceGroups/${take('${resourceGroup().name}-${uniqueString(resourceGroup().id)}${uniqueString(applicationResourceName)}', 90)}' : managedResourceGroupId)

resource vnet 'Microsoft.Network/virtualNetworks@2022-11-01'=  {
  name: virtualNetworkName
  location: location
  properties: {
    addressSpace: {
      addressPrefixes: [
        virtualNetworkAddressPrefix
      ]
    }
    dhcpOptions:{
      dnsServers:[
        '8.8.8.8'
        '8.8.4.4'
      ]
    }
    subnets: [
      {
        name: subnetName
        properties: {
          addressPrefix: subnetAddressPrefix
          delegations: []
          privateEndpointNetworkPolicies: 'Disabled'
          privateLinkServiceNetworkPolicies: 'Disabled'
        }
      }
    ]

  }
}

output vnetId string = vnet.id

  resource vmx 'Microsoft.Solutions/applications@2021-07-01' = {
  
    location: location
  kind: 'MarketPlace'
  name: applicationResourceName
  plan:{
    name: 'cisco-meraki-vmx'
    product: 'cisco-meraki-vmx'
    publisher: 'cisco'
    version: '15.37.4'
  }
  identity: (empty(managedIdentity) ? null : managedIdentity)
  properties: {
    managedResourceGroupId:managedResourceGroupIdvar
    parameters: {
      location: {
        value: location
      }
      vmName: {
        value: vmName
      }
      merakiAuthToken: {
        value: merakiAuthToken
      }
      zone: {
        value: zone
      }
      virtualNetworkName: {
        value: virtualNetworkName
      }
      virtualNetworkNewOrExisting: {
        value: 'existing'
      }
      virtualNetworkAddressPrefix: {
        value: virtualNetworkAddressPrefix
      }
      virtualNetworkResourceGroup: {
        value: virtualNetworkResourceGroup
      }
      virtualMachineSize: {
        value: virtualMachineSize
      }
      subnetName: {
        value: subnetName
      }
      subnetAddressPrefix: {
        value: subnetAddressPrefix
      }
    }
  jitAccessPolicy: null 
  }
}
module peerFirstVnetSecondVnet 'peering.bicep' = {
  name: 'peerFirstToSecond'
  scope: resourceGroup('Meraki')
  params: {
    existingLocalVirtualNetworkName: virtualNetworkName
    existingRemoteVirtualNetworkName: remoteVirtualNetworkName
    existingRemoteVirtualNetworkResourceGroupName: remoteVirtualNetworkrg
  }
dependsOn:[
  vnet
]
}

module peerSecondVnetFirstVnet 'peering.bicep' = {
  name: 'peerSecondToFirst'
  scope: resourceGroup(remoteVirtualNetworkrg)
  params: {
    existingLocalVirtualNetworkName: remoteVirtualNetworkName
    existingRemoteVirtualNetworkName: virtualNetworkName
    existingRemoteVirtualNetworkResourceGroupName: 'Meraki'
  }
dependsOn:[
  vnet
  peerFirstVnetSecondVnet
]
}
